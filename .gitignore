# 忽略这个目录下的所有文件
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
 
# Runtime data
pids
*.pid
*.seed
*.pid.lock
 
# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov
 
# Coverage directory used by tools like istanbul
coverage
 
# nyc test coverage
.nyc_output
 
# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt
 
# Bower dependency directory (https://bower.io/)
bower_components
 
# node-waf configuration
.lock-wscript
 
# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release
 
# Dependency directories
node_modules/
jspm_packages/
 
# Typescript v1 declaration files
typings/
 
# Optional npm cache directory
.npm
 
# Optional eslint cache
.eslintcache
 
# Optional REPL history
.node_repl_history
 
# Output of 'npm pack'
*.tgz
 
# Yarn Integrity file
.yarn-integrity
 
# dotenv environment variables file
.env



# git 常用指令
git add 文件名
git commit -m "备注信息"
git status   掌握仓库当前的状态（比如是否有文件被修改过）
git diff     可以查看修改内容
git log      显示从最近到最远的提交日志
git log --pretty=oneline   整洁，变成一行
git reset --hard HEAD^     退回上一个版本  HEAD^^退回上两个版本
git reflog   用来记录你的每一次命令，看命令历史
git checkout  其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，
                都可以“一键还原”
git checkout -- file可以丢弃工作区的修改
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，
        用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，
        想丢弃修改，分两步，第一步用命令git reset HEAD <file>，
        就回到了场景1，第二步按场景1操作。
git rm  用于删除一个文件